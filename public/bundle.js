var Reactivity=function(e){var t={};function n(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,n),l.l=!0,l.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);let o=0,l=0;const i={info(e){let t=document.getElementById("noLogs");t&&""!==t.innerText&&(t.innerText="");let n=document.createElement("p");n.id="logText",n.innerText=e,document.getElementById("logs").appendChild(n)}},r=function(e){this.subscribers=new Set,this.depend=function(e){this.subscribers.add(e)},this.notify=function(){for(let e of this.subscribers)i.info(this.name+" notifying "+e.name),e.update()},this.id=l++,this.name=e};r.target=null;const p=function(e,t,n,...l){this.update=function(){t.apply(n,l)},this.id=o++,this.name=e},a=function(e,t,n,o){console.log("bindPropToTemplate:"+t+":"+this[n]),r.target=new p("Binding prop Watcher: "+t,this.render,this,e,t,o);"function"==typeof this[n]?this[n].apply(this):-1!==n.indexOf(".")?((e,t)=>{let n=t.split(".");console.log(n);let o=e[n[0]];for(let e=1;e<n.length;e++)o=o[n[e]]})(this,n):this[n];r.target=null},c=(e,t,n)=>{t.classList.add(e),setTimeout(()=>{t.classList.remove(e)},n)},d=function(e,t,n){let o=document.getElementById(t);if(o)o.innerHTML=e.apply(this),c("activeProps",o,3e3);else{let l=document.getElementById(n);(o=document.createElement("div")).id=t,o.innerHTML=e.apply(this),l.appendChild(o),c("initProps",o,1e3)}},u=function(e,t,n){if("object"!=typeof e)return e;let o={};for(let l in e){let i=e[l];"object"==typeof e[l]&&(i=u(e[l],t,!0));let p=new r(l);Object.defineProperty(n?o:t,l,{get:function(){return r.target&&p.depend(r.target),i},set:function(e){i=u(e,t),p.notify()}})}return n?o:t},m=function(e,t,n){const o=e.computed,l=e.templates,i=e.props||[],c=e.components||[],s=e.data&&e.data()||{};let f={};return f.render=d,f.bindPropToTemplate=a,f.name=e.name,f.el=e.el,u(s,f),function(e,t){let n={},o={};for(let l in t){let i=null;n[l]=new p("Computed watcher prop: "+l,function(){i=t[l].apply(e),o[l].notify()},null),r.target=n[l],i=t[l].apply(e),r.target=null,o[l]=new r(l),Object.defineProperty(e,l,{get:function(){return r.target&&(o[l].depend(r.target),r.target=null),i}})}}(f,o),function(e,t,n,o){for(let l of t){let t=new r(l);Object.defineProperty(e,l,{get:function(){return r.target&&t.depend(r.target),o[n[l]]}})}}(f,i,t,n),function(e,t){for(let n of t)e.bindPropToTemplate(n.html,n.id,n.prop),e.render(n.html,n.id,e.el)}(f,l),function(e,t){for(let n of t){let t=n.template(),o=n.name,l=n.value;l.templates;if(-1===t.indexOf(o)){console.warn(`${o} not defined in the template`);break}{let n=t.split("</"+o+">")[0].split("data-"),i={};for(let e of n)if(-1!==e.indexOf("=")){let t=e.split("=");i[t[0]]=t[1].split('"')[1]}console.log("propValueHash:"+JSON.stringify(i)),m(l,i,e)}}}(f,c),f};var s={templateForA:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>A</strong>: ${this.a}</p>`},templateForB:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>B</strong> (A * 10): ${this.b}</p>`},templateForC:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>C</strong>: ${this.c}</p>`},templateForD:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>D</strong> (B + 11): ${this.d}</p>`},templateForF:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>F</strong>(Length): ${this.e.f}</p>`},templateForG:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>G</strong>(Width): ${this.e.g}</p>`},templateForH:function(){return`<p>Hello, I am a <i>nested computed</i> prop. You can call me <strong>H</strong>(Area): ${this.nestedComputed}</p>`},templateAForComponentB:function(){return`<p>I'm a child component I have inherited my parent's property a: ${this.a1}</p>`},templateBForComponentB:function(){return`<p>I'm a child component. This is my property B1: ${this.b1}</p>`},templateForChildComponentPlaceholder:function(){return'<my-child-component data-a1="a"></my-child-component>'}};const f={name:"componentOne",data:()=>({a:5,c:"Hello there!!",e:{f:5,g:6}}),computed:{b:function(){return 10*this.a},d:function(){return this.b+11},nestedComputed:function(){return isNaN(this.e.f)||isNaN(this.e.g)?0:this.e.f*this.e.g}},el:"componentOne",templates:[{html:s.templateForA,id:"a",prop:"a"},{html:s.templateForB,id:"b",prop:"b"},{html:s.templateForC,id:"c",prop:"c"},{html:s.templateForD,id:"d",prop:"d"},{html:s.templateForF,id:"f",prop:"e.f"},{html:s.templateForG,id:"g",prop:"e.g"},{html:s.templateForH,id:"h",prop:"nestedComputed"}],components:[{name:"my-child-component",value:{name:"childComponent",el:"childComponent",props:["a1"],data:()=>({b1:10}),templates:[{html:s.templateAForComponentB,id:"child_a",prop:"a1"},{html:s.templateBForComponentB,id:"child_b",prop:"b1"}]},template:s.templateForChildComponentPlaceholder}]};function h(){let e=document.getElementById("logs"),t=document.getElementById("noLogs");t?t.innerText="no logs...":((t=document.createElement("p")).id="noLogs",t.innerText="no logs...",e.appendChild(t))}document.getElementById("inputA").onchange=function(e){let t=document.getElementById("inputA").value;isNaN(t)||(g.a=t)},document.getElementById("inputC").onchange=function(e){let t=document.getElementById("inputC").value;g.c=t},document.getElementById("inputF").onchange=function(e){let t=document.getElementById("inputF").value;g.e.f=t},document.getElementById("inputG").onchange=function(e){let t=document.getElementById("inputG").value;g.e.g=t},document.getElementById("clearLogs").onclick=function(e){let t=document.getElementById("logs");for(;t.hasChildNodes()&&"Dependency Tracker"!=t.lastChild.innerText;)t.removeChild(t.lastChild);h()},h();let g=m(f);console.log(g),setTimeout(()=>{g.c="hello Chicago!!"},2e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,