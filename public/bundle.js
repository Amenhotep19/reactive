var Reactivity=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);let o=0,r=0;const i=function(t){this.subscribers=[],this.depend=function(t){void 0===this.subscribers.find(e=>e.id===t.id)&&this.subscribers.push(t)},this.notify=function(){this.subscribers.forEach(t=>{console.log(this.name+" notifying "+t.name),t.update()})},this.id=r++,this.name=t};i.target=null;const l=function(t,e,n,...r){this.update=function(){e.apply(n,r)},this.id=o++,this.name=t},p=function(t,e,n){console.log("bindPropToTemplate:"+e+":"+this[n]),i.target=new l("Binding prop Watcher: "+e,this.render,this,t,e);"function"==typeof this[n]?this[n].apply(this):-1!==n.indexOf(".")?((t,e)=>{let n=e.split(".");console.log(n);let o=t[n[0]];for(let t=1;t<n.length;t++)o=o[n[t]]})(this,n):this[n];i.target=null},a=function(t,e){document.getElementById(e).innerHTML=t.apply(this),document.getElementById(e).classList.add("activeProps"),setTimeout(()=>{document.getElementById(e).classList.remove("activeProps")},3e3)},c=function(t,e,n){if("object"!=typeof t)return t;let o={};for(let r in t){let l=t[r];"object"==typeof t[r]&&(l=c(t[r],e,!0));let p=new i(r);Object.defineProperty(n?o:e,r,{get:function(){return i.target&&p.depend(i.target),l},set:function(t){l=c(t,e),p.notify()}})}return n?o:e},u=function(t,e,n){let o={};o.render=a,o.bindPropToTemplate=p;const r=t.computed,s=t.templates,m=t.props||[],d=t.components||[],f=t.data&&t.data()||{};return c(f,o),function(t,e){let n={},o={};for(let r in e){let p;n[r]=new l("Computed watcher prop: "+r,function(){p=e[r].apply(t),o[r].notify()},null),i.target=n[r],p=e[r].apply(t),i.target=null,o[r]=new i(r),Object.defineProperty(t,r,{get:function(){return i.target&&(o[r].depend(i.target),i.target=null),p}})}}(o,r),function(t,e,n,o){for(let r of e){let e=new i(r);Object.defineProperty(t,r,{get:function(){return i.target&&e.depend(i.target),o[n[r]]}})}}(o,m,e,n),function(t,e){for(let n of e)t.bindPropToTemplate(n.html,n.id,n.prop),t.render(n.html,n.id)}(o,s),function(t,e){for(let n of e){let e=n.template(),o=n.name,r=n.value;r.templates;if(-1===e.indexOf(o)){console.warn(`${o} not defined in the template`);break}{let n=e.split("</"+o+">")[0].split("data-"),i={};for(let t of n)if(-1!==t.indexOf("=")){let e=t.split("=");i[e[0]]=e[1].split('"')[1]}console.log("propValueHash:"+JSON.stringify(i)),u(r,i,t)}}}(o,d),o};var s={templateForA:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>A</strong>: ${this.a}</p>`},templateForB:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>B</strong> (A * 10): ${this.b}</p>`},templateForC:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>C</strong>: ${this.c}</p>`},templateForD:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>D</strong> (B + 11): ${this.d}</p>`},templateForF:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>F</strong>(Length): ${this.e.f}</p>`},templateForG:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>G</strong>(Width): ${this.e.g}</p>`},templateForH:function(){return`<p>Hello, I am a <i>nested computed</i> prop. You can call me <strong>H</strong>(Area): ${this.nestedComputed}</p>`},templateAForComponentB:function(){return`<p>I'm a child component I have inherited my parent's property a: ${this.a1}</p>`},templateBForComponentB:function(){return`<p>I'm a child component. This is my property B1: ${this.b1}</p>`},templateForChildComponentPlaceholder:function(){return'<my-child-component data-a1="a"></my-child-component>'}};const m={name:"componentOne",data:()=>({a:5,c:"Hello there!!",e:{f:5,g:6}}),computed:{b:function(){return 10*this.a},d:function(){return this.b+11},nestedComputed:function(){return isNaN(this.e.f)||isNaN(this.e.g)?0:this.e.f*this.e.g}},el:"appRoot",templates:[{html:s.templateForA,id:"a",prop:"a"},{html:s.templateForB,id:"b",prop:"b"},{html:s.templateForC,id:"c",prop:"c"},{html:s.templateForD,id:"d",prop:"d"},{html:s.templateForF,id:"f",prop:"e.f"},{html:s.templateForG,id:"g",prop:"e.g"},{html:s.templateForH,id:"h",prop:"nestedComputed"}],components:[{name:"my-child-component",value:{name:"childComponent",props:["a1"],data:()=>({b1:10}),templates:[{html:s.templateAForComponentB,id:"child_a",prop:"a1"},{html:s.templateBForComponentB,id:"child_b",prop:"b1"}]},template:s.templateForChildComponentPlaceholder}]};document.getElementById("inputA").onchange=function(t){let e=document.getElementById("inputA").value;isNaN(e)||(d.a=e)},document.getElementById("inputC").onchange=function(t){let e=document.getElementById("inputC").value;d.c=e},document.getElementById("inputF").onchange=function(t){let e=document.getElementById("inputF").value;d.e.f=e},document.getElementById("inputG").onchange=function(t){let e=document.getElementById("inputG").value;d.e.g=e};let d=u(m);console.log(d),setTimeout(()=>{d.c="hello Chicago!!"},2e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,