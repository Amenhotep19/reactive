var Reactivity=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);let o=0,r=0;const i=function(t){this.subscribers=[],this.depend=function(t){void 0===this.subscribers.find(e=>e.id===t.id)&&this.subscribers.push(t)},this.notify=function(){this.subscribers.forEach(t=>{console.log(this.name+" notifying "+t.name),t.update()})},this.id=r++,this.name=t};i.target=null;const l=function(t,e,n,...r){this.update=function(){e.apply(n,r)},this.id=o++,this.name=t},p=function(t,e,n){console.log("bindPropToTemplate:"+e+":"+this[n]),i.target=new l("Binding prop Watcher: "+e,this.render,this,t,e);"function"==typeof this[n]?this[n].apply(this):-1!==n.indexOf(".")?((t,e)=>{let n=e.split(".");console.log(n);let o=t[n[0]];for(let t=1;t<n.length;t++)o=o[n[t]]})(this,n):this[n];i.target=null},a=function(t,e){document.getElementById(e).innerHTML=t.apply(this),document.getElementById(e).classList.add("activeProps"),setTimeout(()=>{document.getElementById(e).classList.remove("activeProps")},3e3)},c=function(t,e,n){if("object"!=typeof t)return t;let o={};for(let r in t){let l=t[r];"object"==typeof t[r]&&(l=c(t[r],e,!0));let p=new i(r);Object.defineProperty(n?o:e,r,{get:function(){return i.target&&p.depend(i.target),l},set:function(t){l=c(t,e),p.notify()}})}return n?o:e},u=function(t,e,n){let o={};o.render=a,o.bindPropToTemplate=p;const r=t.computed,s=t.templates,m=t.props||[],d=t.components||[],f=t.data&&t.data()||{};return c(f,o),function(t,e){let n={},o={};for(let t in e)n[t]=new l("Computed watcher prop: "+t,function(){o[t].notify()},null);for(let r in e)o[r]=new i(r),Object.defineProperty(t,r,{get:function(){i.target&&(o[r].depend(i.target),i.target=null),i.target=n[r];let t=e[r].apply(this);return i.target=null,t}})}(o,r),function(t,e,n,o){for(let r of e){let e=new i(r);Object.defineProperty(t,r,{get:function(){return i.target&&e.depend(i.target),o[n[r]]}})}}(o,m,e,n),function(t,e){for(let n of e)t.bindPropToTemplate(n.html,n.id,n.prop),t.render(n.html,n.id)}(o,s),function(t,e){for(let n of e){let e=n.template(),o=n.name,r=n.value;r.templates;if(-1===e.indexOf(o)){console.warn(`${o} not defined in the template`);break}{let n=e.split("</"+o+">")[0].split("data-"),i={};for(let t of n)if(-1!==t.indexOf("=")){let e=t.split("=");i[e[0]]=e[1].split('"')[1]}console.log("propValueHash:"+JSON.stringify(i)),u(r,i,t)}}}(o,d),o};var s={templateForA:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>A</strong>: ${this.a}</p>`},templateForB:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>B</strong> (A * 10): ${this.b}</p>`},templateForC:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>C</strong>: ${this.c}</p>`},templateForD:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>D</strong> (B + 11): ${this.d}</p>`},templateForF:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>F</strong>(Length): ${this.e.f}</p>`},templateForG:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>G</strong>(Width): ${this.e.g}</p>`},templateForH:function(){return`<p>Hello, I am a <i>nested computed</i> prop. You can call me <strong>H</strong>(Area): ${this.nestedComputed}</p>`},templateAForComponentB:function(){return`<p>I'm a child component I have inherited my parent's property a: ${this.a1}</p>`},templateBForComponentB:function(){return`<p>I'm a child component. This is my property B1: ${this.b1}</p>`},templateForChildComponentPlaceholder:function(){return'<my-child-component data-a1="a"></my-child-component>'}};const m={name:"componentOne",data:()=>({a:5,c:"Hello there!!",e:{f:5,g:6}}),computed:{b:function(){return 10*this.a},d:function(){return this.b+11},nestedComputed:function(){return isNaN(this.e.f)||isNaN(this.e.g)?0:this.e.f*this.e.g}},el:"appRoot",templates:[{html:s.templateForA,id:"a",prop:"a"},{html:s.templateForB,id:"b",prop:"b"},{html:s.templateForC,id:"c",prop:"c"},{html:s.templateForD,id:"d",prop:"d"},{html:s.templateForF,id:"f",prop:"e.f"},{html:s.templateForG,id:"g",prop:"e.g"},{html:s.templateForH,id:"h",prop:"nestedComputed"}],components:[{name:"my-child-component",value:{name:"childComponent",props:["a1"],data:()=>({b1:10}),templates:[{html:s.templateAForComponentB,id:"child_a",prop:"a1"},{html:s.templateBForComponentB,id:"child_b",prop:"b1"}]},template:s.templateForChildComponentPlaceholder}]};document.getElementById("inputA").onchange=function(t){let e=document.getElementById("inputA").value;isNaN(e)||(d.a=e)},document.getElementById("inputC").onchange=function(t){let e=document.getElementById("inputC").value;d.c=e},document.getElementById("inputF").onchange=function(t){let e=document.getElementById("inputF").value;d.e.f=e},document.getElementById("inputG").onchange=function(t){let e=document.getElementById("inputG").value;d.e.g=e};let d=u(m);console.log(d),setTimeout(()=>{d.c="hello Chicago!!"},2e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9SZWFjdGl2aXR5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi9nbG9iYWxzLmpzIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi9yZWFjdGl2ZS9kZXAuanMiLCJ3ZWJwYWNrOi8vUmVhY3Rpdml0eS8uL3JlYWN0aXZlL3dhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vUmVhY3Rpdml0eS8uL3JlYWN0aXZlL2JpbmRQcm9wLmpzIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi91dGlscy5qcyIsIndlYnBhY2s6Ly9SZWFjdGl2aXR5Ly4vcmVuZGVyLmpzIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi9yZWFjdGl2ZS9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9SZWFjdGl2aXR5Ly4vdGVtcGxhdGVzLmpzIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi9jb21wb25lbnRzLmpzIiwid2VicGFjazovL1JlYWN0aXZpdHkvLi90ZXN0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWxXYXRjaGVyQ291bnQiLCJnbG9iYWxEZXBUcmFja2VyQ291bnQiLCJEZXAiLCJ0aGlzIiwic3Vic2NyaWJlcnMiLCJkZXBlbmQiLCJ1bmRlZmluZWQiLCJmaW5kIiwidiIsImlkIiwicHVzaCIsIm5vdGlmeSIsImZvckVhY2giLCJjb25zb2xlIiwibG9nIiwidXBkYXRlIiwidGFyZ2V0IiwiV2F0Y2hlciIsImNiIiwidm0iLCJhcmdzIiwiYXBwbHkiLCJiaW5kUHJvcFRvVGVtcGxhdGUiLCJ0ZW1wbGF0ZSIsInByb3AiLCJyZW5kZXIiLCJpbmRleE9mIiwicHJvcHMiLCJfcHJvcHMiLCJzcGxpdCIsImxlbmd0aCIsInRyYXZlcnNlVG9Qcm9wIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJpbml0RGF0YSIsIm9iaiIsInJlYWN0aXZlIiwibmVzdGVkIiwid3JhcHBlciIsInZhbCIsImRlcCIsInNldCIsIm5ld1ZhbCIsIm1ha2VSZWFjdGl2ZSIsInByb3BWYWx1ZUhhc2giLCJwYXJlbnQiLCJjb21wdXRlZCIsInRlbXBsYXRlcyIsImNvbXBvbmVudHMiLCJkYXRhIiwiY29tcHV0ZWRXYXRjaGVycyIsImNvbXB1dGVkRGVwcyIsImluaXRDb21wdXRlZCIsImluaXRQcm9wcyIsImh0bWwiLCJpbml0VGVtcGxhdGVzIiwiY29tcG9uZW50Iiwid2FybiIsImF0dHJzIiwiYXR0ciIsImt2cCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbml0Q29tcG9uZW50cyIsInRlbXBsYXRlc18wIiwidGVtcGxhdGVGb3JBIiwiYSIsInRlbXBsYXRlRm9yQiIsImIiLCJ0ZW1wbGF0ZUZvckMiLCJ0ZW1wbGF0ZUZvckQiLCJ0ZW1wbGF0ZUZvckYiLCJlIiwiZiIsInRlbXBsYXRlRm9yRyIsImciLCJ0ZW1wbGF0ZUZvckgiLCJuZXN0ZWRDb21wdXRlZCIsInRlbXBsYXRlQUZvckNvbXBvbmVudEIiLCJhMSIsInRlbXBsYXRlQkZvckNvbXBvbmVudEIiLCJiMSIsInRlbXBsYXRlRm9yQ2hpbGRDb21wb25lbnRQbGFjZWhvbGRlciIsImNvbXBvbmVudE9uZSIsImlzTmFOIiwiZWwiLCJvbmNoYW5nZSIsIm15Rmlyc3RSZWFjdGl2ZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6IjJCQUNBLElBQUFBLEtB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QUFVLEVBQUFjLHVCQUNBMUUsR0FBQSxVQUNBZSxLQUFBLE9BR0FtQyxLQUFBVSxFQUFBZ0IsdUJBQ0E1RSxHQUFBLFVBQ0FlLEtBQUEsUUF1RUFELFNBQUE4QyxFQUFBa0Isd0NDaEZBdkQsU0FBQUMsZUFBQSxVQUFBMEQsU0FOQSxTQUFBZCxHQUNBLElBQUFqQyxFQUFBWixTQUFBQyxlQUFBLFVBQUExQyxNQUNBa0csTUFBQTdDLEtBQ0FnRCxFQUFBckIsRUFBQTNCLElBU0FaLFNBQUFDLGVBQUEsVUFBQTBELFNBSkEsU0FBQWQsR0FDQSxJQUFBakMsRUFBQVosU0FBQUMsZUFBQSxVQUFBMUMsTUFDQXFHLEVBQUFoSCxFQUFBZ0UsR0FRQVosU0FBQUMsZUFBQSxVQUFBMEQsU0FKQSxTQUFBZCxHQUNBLElBQUFqQyxFQUFBWixTQUFBQyxlQUFBLFVBQUExQyxNQUNBcUcsRUFBQWYsRUFBQUMsRUFBQWxDLEdBUUFaLFNBQUFDLGVBQUEsVUFBQTBELFNBSkEsU0FBQWQsR0FDQSxJQUFBakMsRUFBQVosU0FBQUMsZUFBQSxVQUFBMUMsTUFDQXFHLEVBQUFmLEVBQUFHLEVBQUFwQyxHQUlBLElBQUFnRCxFQUFBNUMsRUFBQXdDLEdBQ0EzRSxRQUFBQyxJQUFBOEUsR0FDQXZELFdBQUEsS0FDQXVELEVBQUFoSCxFQUFBLG1CQUNDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLy9HbG9iYWwgdmFyaWFibGVzXHJcbmxldCBnbG9iYWxXYXRjaGVyQ291bnQgPSAwXHJcbmxldCBnbG9iYWxEZXBUcmFja2VyQ291bnQgPSAwXHJcbmV4cG9ydCB7Z2xvYmFsV2F0Y2hlckNvdW50LCBnbG9iYWxEZXBUcmFja2VyQ291bnR9IiwiIGltcG9ydCB7Z2xvYmFsRGVwVHJhY2tlckNvdW50fSBmcm9tICcuLi9nbG9iYWxzLmpzJ1xyXG4gLy9EZXBlbmRlbmN5IFRyYWNrZXIsIG1haW50YWlucyBhIGxpc3Qgb2Ygc3Vic2NyaWJlcnMsIGFuZCBhbiBhY3RpdmUgdGFyZ2V0IChjYW4gb25seSBiZSBvbmUgYXQgYW55IHBvaW50IGluIHRpbWUpXHJcbmNvbnN0IERlcCA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICB0aGlzLnN1YnNjcmliZXJzID0gW11cclxuICB0aGlzLmRlcGVuZCA9IGZ1bmN0aW9uKHMpIHtcclxuICAgIGlmICh0aGlzLnN1YnNjcmliZXJzLmZpbmQodiA9PiB2LmlkID09PSBzLmlkKSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gY29uc29sZS5sb2cocy5pZCArICcgaGFzIGFscmVhZHkgc3Vic2NyaWJlZCBmb3IgJyArIHRoaXMuaWQpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHRoaXMubm90aWZ5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goKHMpID0+IHtcclxuICAgICAgY29uc29sZS5sb2codGhpcy5uYW1lICsgJyBub3RpZnlpbmcgJyArIHMubmFtZSlcclxuICAgICAgcy51cGRhdGUoKVxyXG4gICAgfSlcclxuICB9XHJcbiAgdGhpcy5pZCA9IGdsb2JhbERlcFRyYWNrZXJDb3VudCsrXHJcbiAgdGhpcy5uYW1lID0gbmFtZVxyXG59XHJcbkRlcC50YXJnZXQgPSBudWxsXHJcbmV4cG9ydCB7RGVwfVxyXG4iLCJpbXBvcnQge2dsb2JhbFdhdGNoZXJDb3VudH0gZnJvbSAnLi4vZ2xvYmFscy5qcydcclxuLy9XYXRjaGVyIC0gYXR0YWNoZXMgYXMgYW4gYWN0aXZlIGRlcCB0YXJnZXQsIGZpcmVzIHRoZSB1cGRhdGUgY2FsbGJhY2tcclxuZXhwb3J0IGNvbnN0IFdhdGNoZXIgPSBmdW5jdGlvbihuYW1lLCBjYiwgdm0sIC4uLmFyZ3MpIHtcclxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNiLmFwcGx5KHZtLCBhcmdzKVxyXG4gICAgfVxyXG4gICAgdGhpcy5pZCA9IGdsb2JhbFdhdGNoZXJDb3VudCsrXHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lXHJcbn0iLCIgIGltcG9ydCB7RGVwfSBmcm9tICcuL2RlcC5qcydcclxuICBpbXBvcnQge1dhdGNoZXJ9IGZyb20gJy4vd2F0Y2hlci5qcydcclxuICBpbXBvcnQge3RyYXZlcnNlVG9Qcm9wfSBmcm9tICcuLi91dGlscy5qcydcclxuXHJcbiAgLy9GbiB0byBiaW5kIGNvbXBvbmVudCdzIHByb3BzIHRvIGh0bWwgdGVtcGxhdGVcclxuICBleHBvcnQgY29uc3QgYmluZFByb3BUb1RlbXBsYXRlID0gZnVuY3Rpb24odGVtcGxhdGUsIGlkLCBwcm9wKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImJpbmRQcm9wVG9UZW1wbGF0ZTpcIiArIGlkICsgXCI6XCIgKyB0aGlzW3Byb3BdKVxyXG4gICAgRGVwLnRhcmdldCA9IG5ldyBXYXRjaGVyKCdCaW5kaW5nIHByb3AgV2F0Y2hlcjogJyArIGlkLCB0aGlzLnJlbmRlciwgdGhpcywgdGVtcGxhdGUsIGlkKVxyXG4gICAgbGV0IHZhbCA9IHR5cGVvZih0aGlzW3Byb3BdKSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1twcm9wXS5hcHBseSh0aGlzKSA6IHByb3AuaW5kZXhPZignLicpICE9PSAtMSA/IHRyYXZlcnNlVG9Qcm9wKHRoaXMsIHByb3ApIDogdGhpc1twcm9wXVxyXG4gICAgRGVwLnRhcmdldCA9IG51bGxcclxuICB9IiwiLy9UcmF2ZXJzZSB0byB0aGUgbmVzdGVkIHByb3BcclxuY29uc3QgdHJhdmVyc2VUb1Byb3AgPSAodGFyZ2V0LCBwcm9wcykgPT4ge1xyXG4gICAgbGV0IF9wcm9wcyA9IHByb3BzLnNwbGl0KCcuJylcclxuICAgIGNvbnNvbGUubG9nKF9wcm9wcylcclxuICAgIGxldCB2YWwgPSB7fVxyXG4gICAgbGV0IG8gPSB0YXJnZXRbX3Byb3BzWzBdXVxyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBfcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbyA9IG9bX3Byb3BzW2ldXVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9cclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IHt0cmF2ZXJzZVRvUHJvcH1cclxuIFxyXG4gICIsIiAgLy9vbmx5IHRoaXMgZ3V5IHNob3VsZCB0b3VjaCB0aGUgRE9NLCBraWRkaW5nIG5vdFxyXG4gIGV4cG9ydCBjb25zdCByZW5kZXIgPSBmdW5jdGlvbih0ZW1wbGF0ZSwgaWQpIHtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5pbm5lckhUTUwgPSB0ZW1wbGF0ZS5hcHBseSh0aGlzKVxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZVByb3BzJylcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmVQcm9wcycpXHJcbiAgICB9LCAzMDAwKVxyXG4gIH0iLCJcclxuaW1wb3J0IHsgRGVwIH0gZnJvbSAnLi9kZXAuanMnXHJcbmltcG9ydCB7IFdhdGNoZXIgfSBmcm9tICcuL3dhdGNoZXIuanMnXHJcbmltcG9ydCB7IGJpbmRQcm9wVG9UZW1wbGF0ZSB9IGZyb20gJy4vYmluZFByb3AuanMnXHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4uL3JlbmRlci5qcydcclxuXHJcbmNvbnN0IGluaXREYXRhID0gZnVuY3Rpb24gKG9iaiwgcmVhY3RpdmUsIG5lc3RlZCkge1xyXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIG9ialxyXG4gIH1cclxuICBsZXQgd3JhcHBlciA9IHt9XHJcblxyXG4gIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XHJcbiAgICBsZXQgdmFsID0gb2JqW3Byb3BdXHJcbiAgICBpZiAodHlwZW9mIG9ialtwcm9wXSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICB2YWwgPSBpbml0RGF0YShvYmpbcHJvcF0sIHJlYWN0aXZlLCB0cnVlKVxyXG4gICAgfVxyXG4gICAgbGV0IGRlcCA9IG5ldyBEZXAocHJvcClcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXN0ZWQgPyB3cmFwcGVyIDogcmVhY3RpdmUsIHByb3AsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgIGRlcC5kZXBlbmQoRGVwLnRhcmdldClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbFxyXG4gICAgICB9LFxyXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWYWwpIHtcclxuICAgICAgICB2YWwgPSBpbml0RGF0YShuZXdWYWwsIHJlYWN0aXZlKVxyXG4gICAgICAgIGRlcC5ub3RpZnkoKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICByZXR1cm4gbmVzdGVkID8gd3JhcHBlciA6IHJlYWN0aXZlXHJcbn1cclxuXHJcbmNvbnN0IG1ha2VSZWFjdGl2ZSA9IGZ1bmN0aW9uICh2bSwgcHJvcFZhbHVlSGFzaCwgcGFyZW50KSB7XHJcbiAgbGV0IHJlYWN0aXZlID0ge31cclxuICByZWFjdGl2ZS5yZW5kZXIgPSByZW5kZXJcclxuICByZWFjdGl2ZS5iaW5kUHJvcFRvVGVtcGxhdGUgPSBiaW5kUHJvcFRvVGVtcGxhdGVcclxuICBjb25zdCBjb21wdXRlZCA9IHZtLmNvbXB1dGVkXHJcbiAgY29uc3QgdGVtcGxhdGVzID0gdm0udGVtcGxhdGVzXHJcbiAgY29uc3QgcHJvcHMgPSB2bS5wcm9wcyB8fCBbXVxyXG4gIGNvbnN0IGNvbXBvbmVudHMgPSB2bS5jb21wb25lbnRzIHx8IFtdXHJcbiAgY29uc3QgZGF0YSA9ICh2bS5kYXRhICYmIHZtLmRhdGEoKSkgfHwge31cclxuXHJcbiAgaW5pdERhdGEoZGF0YSwgcmVhY3RpdmUpXHJcblxyXG4gIGluaXRDb21wdXRlZChyZWFjdGl2ZSwgY29tcHV0ZWQpXHJcblxyXG4gIGluaXRQcm9wcyhyZWFjdGl2ZSwgcHJvcHMsIHByb3BWYWx1ZUhhc2gsIHBhcmVudClcclxuXHJcbiAgaW5pdFRlbXBsYXRlcyhyZWFjdGl2ZSwgdGVtcGxhdGVzKVxyXG4gIFxyXG4gIGluaXRDb21wb25lbnRzKHJlYWN0aXZlLCBjb21wb25lbnRzKVxyXG4gIFxyXG4gIHJldHVybiByZWFjdGl2ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQocmVhY3RpdmUsIGNvbXB1dGVkKSB7XHJcbiAgbGV0IGNvbXB1dGVkV2F0Y2hlcnMgPSB7fVxyXG4gIGxldCBjb21wdXRlZERlcHMgPSB7fVxyXG4gIC8vQ29tcHV0ZWQgcHJvcGVydGllcyBnZXRzIHRoZWlyIG93biB3YXRjaGVycyEgXHJcbiAgZm9yIChsZXQgcHJvcCBpbiBjb21wdXRlZCkge1xyXG4gICAgY29tcHV0ZWRXYXRjaGVyc1twcm9wXSA9IG5ldyBXYXRjaGVyKCdDb21wdXRlZCB3YXRjaGVyIHByb3A6ICcgKyBwcm9wLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbXB1dGVkRGVwc1twcm9wXS5ub3RpZnkoKVxyXG4gICAgfSwgbnVsbClcclxuICB9XHJcbiAgLy9SZWFjdGl2ZSBjb21wdXRlZCBwcm9wc1xyXG4gIGZvciAobGV0IHByb3AgaW4gY29tcHV0ZWQpIHtcclxuICAgIGNvbXB1dGVkRGVwc1twcm9wXSA9IG5ldyBEZXAocHJvcClcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWFjdGl2ZSwgcHJvcCwge1xyXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xyXG4gICAgICAgICAgY29tcHV0ZWREZXBzW3Byb3BdLmRlcGVuZChEZXAudGFyZ2V0KVxyXG4gICAgICAgICAgRGVwLnRhcmdldCA9IG51bGxcclxuICAgICAgICB9XHJcbiAgICAgICAgRGVwLnRhcmdldCA9IGNvbXB1dGVkV2F0Y2hlcnNbcHJvcF1cclxuICAgICAgICBsZXQgdmFsID0gY29tcHV0ZWRbcHJvcF0uYXBwbHkodGhpcylcclxuICAgICAgICBEZXAudGFyZ2V0ID0gbnVsbFxyXG4gICAgICAgIHJldHVybiB2YWxcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRQcm9wcyhyZWFjdGl2ZSwgcHJvcHMsIHByb3BWYWx1ZUhhc2gsIHBhcmVudCkge1xyXG4gIGZvciAobGV0IHByb3Agb2YgcHJvcHMpIHtcclxuICAgIGxldCBkZXAgPSBuZXcgRGVwKHByb3ApXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVhY3RpdmUsIHByb3AsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgIGRlcC5kZXBlbmQoRGVwLnRhcmdldClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wVmFsdWVIYXNoW3Byb3BdXVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFRlbXBsYXRlcyhyZWFjdGl2ZSwgdGVtcGxhdGVzKSB7XHJcbiAgZm9yIChsZXQgdGVtcGxhdGUgb2YgdGVtcGxhdGVzKSB7XHJcbiAgICByZWFjdGl2ZS5iaW5kUHJvcFRvVGVtcGxhdGUodGVtcGxhdGUuaHRtbCwgdGVtcGxhdGUuaWQsIHRlbXBsYXRlLnByb3ApXHJcbiAgICByZWFjdGl2ZS5yZW5kZXIodGVtcGxhdGUuaHRtbCwgdGVtcGxhdGUuaWQpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0Q29tcG9uZW50cyhyZWFjdGl2ZSwgY29tcG9uZW50cykge1xyXG4gIGZvciAobGV0IGNvbXBvbmVudCBvZiBjb21wb25lbnRzKSB7XHJcbiAgICBsZXQgdGVtcGxhdGUgPSBjb21wb25lbnQudGVtcGxhdGUoKVxyXG4gICAgbGV0IG5hbWUgPSBjb21wb25lbnQubmFtZVxyXG4gICAgbGV0IHZhbHVlID0gY29tcG9uZW50LnZhbHVlXHJcbiAgICBsZXQgY2hpbGRUZW1wbGF0ZXMgPSB2YWx1ZS50ZW1wbGF0ZXNcclxuICAgIGlmICh0ZW1wbGF0ZS5pbmRleE9mKG5hbWUpID09PSAtMSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYCR7bmFtZX0gbm90IGRlZmluZWQgaW4gdGhlIHRlbXBsYXRlYClcclxuICAgICAgYnJlYWtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBhdHRycyA9IHRlbXBsYXRlLnNwbGl0KCc8LycgKyBuYW1lICsgJz4nKVswXS5zcGxpdCgnZGF0YS0nKVxyXG4gICAgICBsZXQgcHJvcFZhbHVlSGFzaCA9IHt9XHJcbiAgICAgIGZvciAobGV0IGF0dHIgb2YgYXR0cnMpIHtcclxuICAgICAgICBpZiAoYXR0ci5pbmRleE9mKCc9JykgIT09IC0xKSB7XHJcbiAgICAgICAgICBsZXQga3ZwID0gYXR0ci5zcGxpdCgnPScpXHJcbiAgICAgICAgICBwcm9wVmFsdWVIYXNoW2t2cFswXV0gPSBrdnBbMV0uc3BsaXQoJ1wiJylbMV1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc29sZS5sb2coJ3Byb3BWYWx1ZUhhc2g6JyArIEpTT04uc3RyaW5naWZ5KHByb3BWYWx1ZUhhc2gpKVxyXG4gICAgICBtYWtlUmVhY3RpdmUodmFsdWUsIHByb3BWYWx1ZUhhc2gsIHJlYWN0aXZlKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgbWFrZVJlYWN0aXZlIH1cclxuXHJcbiIsIlxyXG5sZXQgdGVtcGxhdGVGb3JBID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gYDxwPkhlbGxvLCBJIGFtIGEgPGk+ZGF0YTwvaT4gcHJvcC4gWW91IGNhbiBjYWxsIG1lIDxzdHJvbmc+QTwvc3Ryb25nPjogJHt0aGlzLmF9PC9wPmBcclxuICB9XHJcbiAgXHJcbiAgbGV0IHRlbXBsYXRlRm9yQiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGA8cD5IZWxsbywgSSBhbSBhIDxpPmNvbXB1dGVkPC9pPiBwcm9wLiBZb3UgY2FuIGNhbGwgbWUgPHN0cm9uZz5CPC9zdHJvbmc+IChBICogMTApOiAke3RoaXMuYn08L3A+YFxyXG4gIH1cclxuICBcclxuICBsZXQgdGVtcGxhdGVGb3JDID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gYDxwPkhlbGxvLCBJIGFtIGEgPGk+ZGF0YTwvaT4gcHJvcC4gWW91IGNhbiBjYWxsIG1lIDxzdHJvbmc+Qzwvc3Ryb25nPjogJHt0aGlzLmN9PC9wPmBcclxuICB9XHJcbiAgXHJcbiAgbGV0IHRlbXBsYXRlRm9yRCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGA8cD5IZWxsbywgSSBhbSBhIDxpPmNvbXB1dGVkPC9pPiBwcm9wLiBZb3UgY2FuIGNhbGwgbWUgPHN0cm9uZz5EPC9zdHJvbmc+IChCICsgMTEpOiAke3RoaXMuZH08L3A+YFxyXG4gIH1cclxuICBcclxuICBcclxuICBsZXQgdGVtcGxhdGVGb3JGID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gYDxwPkhlbGxvLCBJIGFtIGEgPGk+bmVzdGVkIGRhdGE8L2k+IHByb3AuIFlvdSBjYW4gY2FsbCBtZSA8c3Ryb25nPkY8L3N0cm9uZz4oTGVuZ3RoKTogJHt0aGlzLmUuZn08L3A+YFxyXG4gIH1cclxuICBcclxuICBsZXQgdGVtcGxhdGVGb3JHID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gYDxwPkhlbGxvLCBJIGFtIGEgPGk+bmVzdGVkIGRhdGE8L2k+IHByb3AuIFlvdSBjYW4gY2FsbCBtZSA8c3Ryb25nPkc8L3N0cm9uZz4oV2lkdGgpOiAke3RoaXMuZS5nfTwvcD5gXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGxldCB0ZW1wbGF0ZUZvckggPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBgPHA+SGVsbG8sIEkgYW0gYSA8aT5uZXN0ZWQgY29tcHV0ZWQ8L2k+IHByb3AuIFlvdSBjYW4gY2FsbCBtZSA8c3Ryb25nPkg8L3N0cm9uZz4oQXJlYSk6ICR7dGhpcy5uZXN0ZWRDb21wdXRlZH08L3A+YFxyXG4gIH1cclxuICBcclxuICBsZXQgdGVtcGxhdGVBRm9yQ29tcG9uZW50QiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGA8cD5JJ20gYSBjaGlsZCBjb21wb25lbnQgSSBoYXZlIGluaGVyaXRlZCBteSBwYXJlbnQncyBwcm9wZXJ0eSBhOiAke3RoaXMuYTF9PC9wPmBcclxuICB9XHJcbiAgXHJcbiAgbGV0IHRlbXBsYXRlQkZvckNvbXBvbmVudEIgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBgPHA+SSdtIGEgY2hpbGQgY29tcG9uZW50LiBUaGlzIGlzIG15IHByb3BlcnR5IEIxOiAke3RoaXMuYjF9PC9wPmBcclxuICB9XHJcbiAgXHJcbiAgbGV0IHRlbXBsYXRlRm9yQ2hpbGRDb21wb25lbnRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGA8bXktY2hpbGQtY29tcG9uZW50IGRhdGEtYTE9XCJhXCI+PC9teS1jaGlsZC1jb21wb25lbnQ+YFxyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICB0ZW1wbGF0ZUZvckEsXHJcbiAgICAgIHRlbXBsYXRlRm9yQixcclxuICAgICAgdGVtcGxhdGVGb3JDLFxyXG4gICAgICB0ZW1wbGF0ZUZvckQsXHJcbiAgICAgIHRlbXBsYXRlRm9yRixcclxuICAgICAgdGVtcGxhdGVGb3JHLFxyXG4gICAgICB0ZW1wbGF0ZUZvckgsXHJcbiAgICAgIHRlbXBsYXRlQUZvckNvbXBvbmVudEIsXHJcbiAgICAgIHRlbXBsYXRlQkZvckNvbXBvbmVudEIsXHJcbiAgICAgIHRlbXBsYXRlRm9yQ2hpbGRDb21wb25lbnRQbGFjZWhvbGRlclxyXG4gIH0iLCIvL0NvbXBvbmVudCBEZWZpbml0aW9uc1xyXG5pbXBvcnQgdGVtcCBmcm9tICcuL3RlbXBsYXRlcy5qcydcclxuY29uc3QgY2hpbGRDb21wb25lbnQgPSB7XHJcbiAgICBuYW1lOiAnY2hpbGRDb21wb25lbnQnLFxyXG4gICAgcHJvcHM6IFsnYTEnXSxcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYjE6IDEwXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZXM6IFt7XHJcbiAgICAgICAgaHRtbDogdGVtcC50ZW1wbGF0ZUFGb3JDb21wb25lbnRCLFxyXG4gICAgICAgIGlkOiBcImNoaWxkX2FcIixcclxuICAgICAgICBwcm9wOiBcImExXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGh0bWw6IHRlbXAudGVtcGxhdGVCRm9yQ29tcG9uZW50QixcclxuICAgICAgICBpZDogXCJjaGlsZF9iXCIsXHJcbiAgICAgICAgcHJvcDogXCJiMVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9XHJcbiAgXHJcbiAgY29uc3QgY29tcG9uZW50T25lID0ge1xyXG4gICAgbmFtZTogJ2NvbXBvbmVudE9uZScsXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGE6IDUsXHJcbiAgICAgICAgYzogJ0hlbGxvIHRoZXJlISEnLFxyXG4gICAgICAgIGU6IHtcclxuICAgICAgICAgIGY6IDUsXHJcbiAgICAgICAgICBnOiA2XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgYjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYSAqIDEwXHJcbiAgICAgIH0sXHJcbiAgICAgIGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmIgKyAxMVxyXG4gICAgICB9LFxyXG4gICAgICBuZXN0ZWRDb21wdXRlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKHRoaXMuZS5mKSB8fCBpc05hTih0aGlzLmUuZykpIHtcclxuICAgICAgICAgIHJldHVybiAwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmUuZiAqIHRoaXMuZS5nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBlbDogJ2FwcFJvb3QnLFxyXG4gICAgdGVtcGxhdGVzOiBbe1xyXG4gICAgICAgIGh0bWw6IHRlbXAudGVtcGxhdGVGb3JBLFxyXG4gICAgICAgIGlkOiBcImFcIixcclxuICAgICAgICBwcm9wOiBcImFcIlxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaHRtbDogdGVtcC50ZW1wbGF0ZUZvckIsXHJcbiAgICAgICAgaWQ6IFwiYlwiLFxyXG4gICAgICAgIHByb3A6IFwiYlwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBodG1sOiB0ZW1wLnRlbXBsYXRlRm9yQyxcclxuICAgICAgICBpZDogXCJjXCIsXHJcbiAgICAgICAgcHJvcDogXCJjXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGh0bWw6IHRlbXAudGVtcGxhdGVGb3JELFxyXG4gICAgICAgIGlkOiBcImRcIixcclxuICAgICAgICBwcm9wOiBcImRcIlxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaHRtbDogdGVtcC50ZW1wbGF0ZUZvckYsXHJcbiAgICAgICAgaWQ6IFwiZlwiLFxyXG4gICAgICAgIHByb3A6IFwiZS5mXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGh0bWw6IHRlbXAudGVtcGxhdGVGb3JHLFxyXG4gICAgICAgIGlkOiBcImdcIixcclxuICAgICAgICBwcm9wOiBcImUuZ1wiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBodG1sOiB0ZW1wLnRlbXBsYXRlRm9ySCxcclxuICAgICAgICBpZDogXCJoXCIsXHJcbiAgICAgICAgcHJvcDogXCJuZXN0ZWRDb21wdXRlZFwiXHJcbiAgICAgIH1cclxuICAgIF0sXHJcbiAgICBjb21wb25lbnRzOiBbe1xyXG4gICAgICBuYW1lOiAnbXktY2hpbGQtY29tcG9uZW50JyxcclxuICAgICAgdmFsdWU6IGNoaWxkQ29tcG9uZW50LFxyXG4gICAgICB0ZW1wbGF0ZTogdGVtcC50ZW1wbGF0ZUZvckNoaWxkQ29tcG9uZW50UGxhY2Vob2xkZXJcclxuICAgIH1dXHJcbiAgfVxyXG5cclxuICBleHBvcnQge2NoaWxkQ29tcG9uZW50LCBjb21wb25lbnRPbmV9IiwiaW1wb3J0IHttYWtlUmVhY3RpdmV9IGZyb20gJy4vcmVhY3RpdmUvb2JzZXJ2ZXIuanMnXHJcbmltcG9ydCB7Y29tcG9uZW50T25lfSBmcm9tICcuL2NvbXBvbmVudHMuanMnXHJcbi8vRXZlbnQgaGFuZGxlciBmb3IgaW5wdXQgY2hhbmdlc1xyXG5mdW5jdGlvbiBzZXRWYWxGb3JBKGUpIHtcclxuICAgIGxldCB2YWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRBJykudmFsdWU7XHJcbiAgICBpZiAoIWlzTmFOKHZhbCkpIHtcclxuICAgICAgbXlGaXJzdFJlYWN0aXZlQ29tcG9uZW50LmEgPSB2YWxcclxuICAgIH1cclxuICB9XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0QScpLm9uY2hhbmdlID0gc2V0VmFsRm9yQVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNldFZhbEZvckMoZSkge1xyXG4gICAgbGV0IHZhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEMnKS52YWx1ZTtcclxuICAgIG15Rmlyc3RSZWFjdGl2ZUNvbXBvbmVudC5jID0gdmFsXHJcbiAgfVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEMnKS5vbmNoYW5nZSA9IHNldFZhbEZvckNcclxuICBcclxuICBmdW5jdGlvbiBzZXRWYWxGb3JGKGUpIHtcclxuICAgIGxldCB2YWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRGJykudmFsdWU7XHJcbiAgICBteUZpcnN0UmVhY3RpdmVDb21wb25lbnQuZS5mID0gdmFsXHJcbiAgfVxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dEYnKS5vbmNoYW5nZSA9IHNldFZhbEZvckZcclxuICBcclxuICBmdW5jdGlvbiBzZXRWYWxGb3JHKGUpIHtcclxuICAgIGxldCB2YWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRHJykudmFsdWU7XHJcbiAgICBteUZpcnN0UmVhY3RpdmVDb21wb25lbnQuZS5nID0gdmFsXHJcbiAgfVxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRHJykub25jaGFuZ2UgPSBzZXRWYWxGb3JHXHJcblxyXG5sZXQgbXlGaXJzdFJlYWN0aXZlQ29tcG9uZW50ID0gbWFrZVJlYWN0aXZlKGNvbXBvbmVudE9uZSlcclxuY29uc29sZS5sb2cobXlGaXJzdFJlYWN0aXZlQ29tcG9uZW50KVxyXG5zZXRUaW1lb3V0KCgpID0+IHtcclxuICBteUZpcnN0UmVhY3RpdmVDb21wb25lbnQuYyA9IFwiaGVsbG8gQ2hpY2FnbyEhXCJcclxufSwgMjAwMClcclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=