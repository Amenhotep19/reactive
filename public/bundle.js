var Reactivity=function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);let o=0,i=0;const r=function(t){this.subscribers=[],this.depend=function(t){void 0===this.subscribers.find(e=>e.id===t.id)&&this.subscribers.push(t)},this.notify=function(){this.subscribers.forEach(t=>{console.log(this.name+" notifying "+t.name),t.update()})},this.id=i++,this.name=t};r.target=null;const l=function(t,e,n,...i){this.update=function(){e.apply(n,i)},this.id=o++,this.name=t},p=function(t,e,n,o){console.log("bindPropToTemplate:"+e+":"+this[n]),r.target=new l("Binding prop Watcher: "+e,this.render,this,t,e,o);"function"==typeof this[n]?this[n].apply(this):-1!==n.indexOf(".")?((t,e)=>{let n=e.split(".");console.log(n);let o=t[n[0]];for(let t=1;t<n.length;t++)o=o[n[t]]})(this,n):this[n];r.target=null},a=(t,e,n)=>{e.classList.add(t),setTimeout(()=>{e.classList.remove(t)},n)},c=function(t,e,n){let o=document.getElementById(e);if(o)a("activeProps",o,3e3);else{let i=document.getElementById(n);(o=document.createElement("div")).id=e,o.innerHTML=t.apply(this),i.appendChild(o),a("initProps",o,1e3)}},u=function(t,e,n){if("object"!=typeof t)return t;let o={};for(let i in t){let l=t[i];"object"==typeof t[i]&&(l=u(t[i],e,!0));let p=new r(i);Object.defineProperty(n?o:e,i,{get:function(){return r.target&&p.depend(r.target),l},set:function(t){l=u(t,e),p.notify()}})}return n?o:e},m=function(t,e,n){const o=t.computed,i=t.templates,a=t.props||[],s=t.components||[],d=t.data&&t.data()||{};let f={};return f.render=c,f.bindPropToTemplate=p,f.name=t.name,f.el=t.el,u(d,f),function(t,e){let n={},o={};for(let i in e){let p=null;n[i]=new l("Computed watcher prop: "+i,function(){p=e[i].apply(t),o[i].notify()},null),r.target=n[i],p=e[i].apply(t),r.target=null,o[i]=new r(i),Object.defineProperty(t,i,{get:function(){return r.target&&(o[i].depend(r.target),r.target=null),p}})}}(f,o),function(t,e,n,o){for(let i of e){let e=new r(i);Object.defineProperty(t,i,{get:function(){return r.target&&e.depend(r.target),o[n[i]]}})}}(f,a,e,n),function(t,e){for(let n of e)t.bindPropToTemplate(n.html,n.id,n.prop),t.render(n.html,n.id,t.el)}(f,i),function(t,e){for(let n of e){let e=n.template(),o=n.name,i=n.value;i.templates;if(-1===e.indexOf(o)){console.warn(`${o} not defined in the template`);break}{let n=e.split("</"+o+">")[0].split("data-"),r={};for(let t of n)if(-1!==t.indexOf("=")){let e=t.split("=");r[e[0]]=e[1].split('"')[1]}console.log("propValueHash:"+JSON.stringify(r)),m(i,r,t)}}}(f,s),f};var s={templateForA:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>A</strong>: ${this.a}</p>`},templateForB:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>B</strong> (A * 10): ${this.b}</p>`},templateForC:function(){return`<p>Hello, I am a <i>data</i> prop. You can call me <strong>C</strong>: ${this.c}</p>`},templateForD:function(){return`<p>Hello, I am a <i>computed</i> prop. You can call me <strong>D</strong> (B + 11): ${this.d}</p>`},templateForF:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>F</strong>(Length): ${this.e.f}</p>`},templateForG:function(){return`<p>Hello, I am a <i>nested data</i> prop. You can call me <strong>G</strong>(Width): ${this.e.g}</p>`},templateForH:function(){return`<p>Hello, I am a <i>nested computed</i> prop. You can call me <strong>H</strong>(Area): ${this.nestedComputed}</p>`},templateAForComponentB:function(){return`<p>I'm a child component I have inherited my parent's property a: ${this.a1}</p>`},templateBForComponentB:function(){return`<p>I'm a child component. This is my property B1: ${this.b1}</p>`},templateForChildComponentPlaceholder:function(){return'<my-child-component data-a1="a"></my-child-component>'}};const d={name:"componentOne",data:()=>({a:5,c:"Hello there!!",e:{f:5,g:6}}),computed:{b:function(){return 10*this.a},d:function(){return this.b+11},nestedComputed:function(){return isNaN(this.e.f)||isNaN(this.e.g)?0:this.e.f*this.e.g}},el:"componentOne",templates:[{html:s.templateForA,id:"a",prop:"a"},{html:s.templateForB,id:"b",prop:"b"},{html:s.templateForC,id:"c",prop:"c"},{html:s.templateForD,id:"d",prop:"d"},{html:s.templateForF,id:"f",prop:"e.f"},{html:s.templateForG,id:"g",prop:"e.g"},{html:s.templateForH,id:"h",prop:"nestedComputed"}],components:[{name:"my-child-component",value:{name:"childComponent",el:"childComponent",props:["a1"],data:()=>({b1:10}),templates:[{html:s.templateAForComponentB,id:"child_a",prop:"a1"},{html:s.templateBForComponentB,id:"child_b",prop:"b1"}]},template:s.templateForChildComponentPlaceholder}]};document.getElementById("inputA").onchange=function(t){let e=document.getElementById("inputA").value;isNaN(e)||(f.a=e)},document.getElementById("inputC").onchange=function(t){let e=document.getElementById("inputC").value;f.c=e},document.getElementById("inputF").onchange=function(t){let e=document.getElementById("inputF").value;f.e.f=e},document.getElementById("inputG").onchange=function(t){let e=document.getElementById("inputG").value;f.e.g=e};let f=m(d);console.log(f),setTimeout(()=>{f.c="hello Chicago!!"},2e3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,